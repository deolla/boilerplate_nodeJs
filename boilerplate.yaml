openapi: 3.0.0
info:
  title: Logic Squad API
  description: API documentation
  version: 1.0.0
  license:
    name: MIT
    url: https://example.com/license
servers:
  - url: https://example.com/v1
    description: Production server
paths:
  # Register and login routes using the default email and password, social accounts, and magic links
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Invalid credentials

  /auth/social/{provider}:
    get:
      tags: [Authentication]
      summary: Social authentication
      operationId: socialAuth
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [google, facebook, twitter]
      responses:
        "200":
          description: Social authentication success
        "400":
          description: Social authentication failed

  /auth/magic-link:
    post:
      tags: [Authentication]
      summary: Send magic link
      operationId: sendMagicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Magic link sent
        "400":
          description: Bad request

  /auth/magic-link/verify:
    post:
      tags: [Authentication]
      summary: Verify magic link
      operationId: verifyMagicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200":
          description: Magic link verified
        "400":
          description: Bad request

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Change user password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /users:
    get:
      tags: [User]
      summary: Get a list of users
      operationId: getUsers
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{userId}:
    get:
      tags: [User]
      summary: Get a user's details
      operationId: getUserDetails
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags: [User]
      summary: Update a user's profile
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
      responses:
        "200":
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{userId}/data:
    get:
      tags: [User]
      summary: List all user's data
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: User ID of the user to get the data
        - name: search
          in: query
          schema:
            type: string
          description: Search Query to query the data from
          required: false
        - name: sort
          in: query
          schema:
            type: string
          description: Sort Query to sort the data in a specified order
          required: false
      responses:
        "200":
          description: A list of user's data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserdataArr"
        "404":
          description: User not found

  /users/{userId}/export:
    post:
      tags: [User]
      summary: Request a data export
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user requesting the data export
      responses:
        "202":
          description: Data export requested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportRequestResponse"
        "400":
          description: Invalid user ID
        "404":
          description: User not found

  /users/{userId}/export/{exportId}:
    get:
      tags: [User]
      summary: Download the exported data
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
        - name: exportId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the export request
      responses:
        "200":
          description: Export file ready for download
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportFile"
        "404":
          description: Export file not found

  # payment methods and routes
  /payments/stripe:
    post:
      tags: [Payment]
      summary: Process payment via Stripe
      operationId: processStripePayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                token:
                  type: string
      responses:
        "200":
          description: Payment successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /payments/flutterwave:
    post:
      tags: [Payment]
      summary: Process payment via Flutterwave
      operationId: processFlutterwavePayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                tx_ref:
                  type: string
                redirect_url:
                  type: string
                payment_type:
                  type: string
      responses:
        "200":
          description: Payment successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /payments/lemonsqueezy:
    post:
      tags: [Payment]
      summary: Process payment via LemonSqueezy
      operationId: processLemonSqueezyPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                reference:
                  type: string
      responses:
        "200":
          description: Payment successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /contents/{id}:
    put:
      tags: [Content]
      summary: Edit content
      operationId: editContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newContent:
                  type: string
      responses:
        "200":
          description: Content edited successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /contents:
    post:
      tags: [Content]
      summary: Create content
      operationId: createContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        "201":
          description: Content created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    get:
      tags: [Content]
      summary: Get all content
      operationId: getAllContent
      responses:
        "200":
          description: Content retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    body:
                      type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /contents/{contentId}:
    get:
      tags: [Content]
      summary: Get content by ID
      operationId: getContentById
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Content retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  body:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Content not found

  # Add a new path for getting chart data
  /chart:
    get:
      tags: [Chart]
      summary: Get chart data
      operationId: getChartData
      responses:
        "200":
          description: Chart data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chartData:
                    type: array
                    items:
                      type: object
                      properties:
                        x:
                          type: number
                        y:
                          type: number
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /organisations:
    post:
      operationId: createOrganisation
      tags: [Organisations]
      summary: Create a new organisation
      #operationId: createOrganisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganisation"
      responses:
        "201":
          description: Organisation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags: [Organisations]
      summary: Get a list of organisations
      operationId: getOrganisations
      responses:
        "200":
          description: List of organisations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /organisations/{orgId}:
    get:
      tags: [Organisations]
      summary: Get an organisation's details
      operationId: getOrganisationDetails
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Organisation details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationDetails"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /organisations/{orgId}/users:
    post:
      tags: [Organisations]
      summary: Add a user to an organisation
      operationId: addUserToOrganisation
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserToOrganisation"
      responses:
        "201":
          description: User added to organisation successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationUserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Organisation or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /organisations/{orgId}/invite:
    post:
      tags: [Organisations]
      summary: Generate an invite link
      operationId: generateInviteLink
      description: Creates an invite link for a user
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: User email
      responses:
        200:
          description: Invite link generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                    description: Invite link
                  status:
                    type: boolean
                  expirationDate:
                    type: string
                    description: when the invitation will expire
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        401:
          description: Unauthorized access to invite a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Don't have the permission to add a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # contact form
  /organisations/{orgId}/contact:
    post:
      tags: [Organisations]
      summary: contact an organisations
      operationId: contactOrganisation
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: janedoe@domain.com
                name:
                  type: string
                  example: Jane Doe
                message:
                  type: string
      responses:
        201:
          description: Contact form submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Details sent successfully
                  status:
                    type: boolean
        400:
          description: Request body missing a required field, or contains an invalid data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: The organisation you're trying to contact does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # dashboard
  /dashboard:
    get:
      tags: [Dashboard]
      summary: Fetch dashboard data
      operationId: getDashboardData
      responses:
        200:
          description: get an authenticated user dashboard data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardResponse"
        401:
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /settings:
    get:
      tags: [Settings]
      summary: Get settings
      operationId: getSettings
      responses:
        "200":
          description: Settings data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags: [Settings]
      summary: Update settings
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSettings"
      responses:
        "200":
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /export-data:
    get:
      tags: [Export]
      summary: Export user data
      operationId: exportUserData
      responses:
        "200":
          description: User data export initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportDataResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /messaging/email:
    post:
      tags: [Messaging]
      summary: Send email using default template and background process
      operationId: sendEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailMessage"
      responses:
        200:
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailSentResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /notifications:
    post:
      tags: [Notifications]
      summary: Send a notification
      operationId: sendNotification
      description: Endpoint to send notifications via email or other channels.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                subject:
                  type: string
              required:
                - message
      responses:
        200:
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cookies/gdpr:
    get:
      tags: [Cookies (GDPR)]
      summary: Get GDPR cookies information
      operationId: getGDPRCookies
      description: Retrieve information about GDPR compliance and cookies usage.
      responses:
        200:
          description: GDPR cookies information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GDPRCookiesResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /waitlist:
    post:
      tags: [Waitlist]
      summary: Join the waitlist
      description: Register a user to a waitlist for a service or feature.
      operationId: joinWaitlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        200:
          description: User added to the waitlist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitlistResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /superadmin/email-templates:
    get:
      tags: [Super Admin]
      summary: Get email templates
      description: Retrieve email templates managed by the Superadmin.
      operationId: getEmailTemplates
      responses:
        200:
          description: Email templates retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplatesResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /blogs:
    get:
      tags: [Blog]
      summary: "View first 20 blog posts"
      parameters:
        - name: sort
          in: query
          required: false
          description: Sort query to sort blog posts in a specified order
          schema:
            type: string
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search query to find blog posts according to a certain query
      responses:
        "200":
          description: A List of the first 20 blog posts in the platform
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogArr"
        "404":
          description: No blog posts found
    post:
      tags: [Blog]
      summary: Add a new blog post to the platform
      description: Add a new post to the platform
      requestBody:
        description: Blog Post object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBlogPost"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
          description: The Created Blog Post

  /blogs/{blogId}:
    get:
      tags: [Blog]
      summary: View a Singular Blog Post
      parameters:
        - name: blogId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: A singluar blog post found by the blog ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
    put:
      tags: [Blog]
      summary: Update a blog post in the platform
      description: Update a post in the platform
      requestBody:
        description: Blog Post object to be Updateed
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBlogPost"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
          description: The Created Blog Post

  /squeeze:
    post:
      summary: A route that collects emails for marketing purposes
      description: Add a new email to the sqeeze
      requestBody:
        description: Email To be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitEmail"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
          description: The Created Email
    get:
      summary: A route that returns all the submitted email addresses
      responses:
        "200":
          description: A list of emails to market to
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEmails"

  /invites:
    post:
      tags: [Invite]
      summary: Generate an invite link
      requestBody:
        description: User information to generate an invite link
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteRequest"
      responses:
        "201":
          description: Invite link generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResponse"
        "400":
          description: Invalid input
    get:
      summary: Get all invites sent by the user
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of invites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"

  /invites/{inviteId}/accept:
    post:
      tags: [Invite]
      summary: Accept an invite
      parameters:
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invite accepted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcceptInviteResponse"
        "404":
          description: Invite not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
        data:
          type: object
          nullable: true

    DashboardResponse:
      type: object
      properties:
        status:
          type: boolean
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            photo_url:
              type: string
            verified:
              type: boolean
        organisations:
          description: organisations the user belongs to
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        active_organisation:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
        notifications:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              is_read:
                type: boolean
                example: false
        invitations:
          type: array
          items:
            type: object
            properties:
              inviter:
                type: object
              organisation:
                type: object
              expirationDate:
                type: string
              status:
                type: string
                enum:
                  - pending
                  - accepted
                  - denied
                  - revoked
                description: the invitation status

    CreateOrganisation:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    AddUserToOrganisation:
      type: object
      properties:
        userId:
          type: string
      required:
        - userId

    UpdateUserProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        photoUrl:
          type: string
          format: binary

    UpdateSettings:
      type: object
      properties:
        setting1:
          type: string
        setting2:
          type: string

    UserResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                photoUrl:
                  type: string
                  format: binary

    OrganisationDetails:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                orgId:
                  type: string
                name:
                  type: string
                description:
                  type: string

    OrganisationResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                orgId:
                  type: string
                name:
                  type: string
                description:
                  type: string

    Organisation:
      type: object
      properties:
        orgId:
          type: string
        name:
          type: string
        description:
          type: string

    OrganisationListResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/Organisation"

    OrganisationUserResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                orgId:
                  type: string
                userId:
                  type: string

    User:
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string

    UserListResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"

    SettingsResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                setting1:
                  type: string
                setting2:
                  type: string

    ExportDataResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"

    EmailMessage:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        subject:
          type: string
        content:
          type: string

    EmailSentResponse:
      type: object
      properties:
        status:
          type: string
        messageId:
          type: string

    # WaitlistRequest:
    #   type: object
    #   properties:
    #     email:
    #       type: string
    #     name:
    #       type: string

    WaitlistResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string

    # EmailTemplatesListResponse:
    #   type: array
    #   items:
    #     type: object
    #     properties:
    #       templateId:
    #         type: string
    #       name:
    #         type: string
    #       description:
    #         type: string

    NotificationResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              message:
                type: string
              timestamp:
                type: string

    GDPRCookiesResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        gdprCookiesContent:
          type: string
        privacyPolicyContent:
          type: string
        aboutUsContent:
          type: string

    EmailTemplatesResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            type: object
            properties:
              templateId:
                type: string
              name:
                type: string
              description:
                type: string
    UserdataArr:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          data:
            type: string

    BlogArr:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          dateCreated:
            type: string
          supportText:
            type: "string"

    BlogPost:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewBlogPost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        author:
          type: string
    SubmitEmail:
      type: object
      properties:
        email:
          type: string
    ListEmails:
      type: array
      items:
        type: object
        properties:
          email:
            type: string
    InviteRequest:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
          format: email
          example: invitee@example.com
    InviteResponse:
      type: object
      properties:
        inviteLink:
          type: string
          example: "https://example.com/invite/12345"
    Invite:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        email:
          type: string
          format: email
        inviteLink:
          type: string
        status:
          type: string
          enum: [pending, accepted, expired]
        sentAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
          nullable: true
    AcceptInviteResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invite accepted successfully!"
    ExportRequestResponse:
      type: object
      properties:
        exportId:
          type: string
          example: "gioh89uiorjktg8y9iuo"
        message:
          type: string
          example: "Your data export request has been received. You will be notified when it's ready."
    ExportFile:
      type: object
      properties:
        fileUrl:
          type: string
          example: "https://apilink.com/exports/838383y3hr9.zip"
        expiresAt:
          type: string
          format: date-time
          example: "A date time"

security:
  - bearerAuth: []
