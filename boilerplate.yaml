openapi: 3.0.0
info:
  title: Authentication API
  version: 1.0.0
  license:
    name: MIT
    url: https://example.com/license
servers:
  - url: https://example.com
    description: Local server
paths:
  # Register and login routes using the default email and password, social accounts, and magic links
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User registered successfully
        "400":
          description: Bad request

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Invalid credentials

  /auth/social/{provider}:
    get:
      tags: [Authentication]
      summary: Social authentication
      operationId: socialAuth
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [google, facebook, twitter]
      responses:
        "200":
          description: Social authentication success
        "400":
          description: Social authentication failed

  /auth/magic-link:
    post:
      tags: [Authentication]
      summary: Send magic link
      operationId: sendMagicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Magic link sent
        "400":
          description: Bad request

  /auth/magic-link/verify:
    post:
      tags: [Authentication]
      summary: Verify magic link
      operationId: verifyMagicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200":
          description: Magic link verified
        "400":
          description: Bad request

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Change user password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  # payment methods and routes
  /payments/stripe:
    post:
      tags: [Payment]
      summary: Process payment via Stripe
      operationId: processStripePayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                token:
                  type: string
      responses:
        "200":
          description: Payment successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /payments/flutterwave:
    post:
      tags: [Payment]
      summary: Process payment via Flutterwave
      operationId: processFlutterwavePayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                tx_ref:
                  type: string
                redirect_url:
                  type: string
                payment_type:
                  type: string
      responses:
        "200":
          description: Payment successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /payments/lemonsqueezy:
    post:
      tags: [Payment]
      summary: Process payment via LemonSqueezy
      operationId: processLemonSqueezyPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                reference:
                  type: string
      responses:
        "200":
          description: Payment successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /content/edit:
    put:
      tags: [Content]
      summary: Edit content
      operationId: editContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentId:
                  type: string
                newContent:
                  type: string
      responses:
        "200":
          description: Content edited successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
  /content:
    post:
      tags: [Content]
      summary: Create content
      operationId: createContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        "201":
          description: Content created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    get:
      tags: [Content]
      summary: Get all content
      operationId: getAllContent
      responses:
        "200":
          description: Content retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    body:
                      type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /content/{contentId}:
    get:
      tags: [Content]
      summary: Get content by ID
      operationId: getContentById
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Content retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  body:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Content not found

  # Add a new path for getting chart data
  /chart:
    get:
      tags: [Chart]
      summary: Get chart data
      operationId: getChartData
      responses:
        "200":
          description: Chart data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chartData:
                    type: array
                    items:
                      type: object
                      properties:
                        x:
                          type: number
                        y:
                          type: number
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /organisations/{orgId}/invite:
    post:
      tags: [Organisations]
      summary: Generate an invite link
      description: Creates an invite link for a user
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: User email
      responses:
        200:
          description: Invite link generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                    description: Invite link
                  status:
                    type: boolean
                  expirationDate:
                    type: string
                    description: when the invitation will expire
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        401:
          description: Unauthorized access to invite a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Don't have the permission to add a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # contact form
  /organisations/{orgId}/contact:
    post:
      tags: [Organisations]
      summary: contact an organisations
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: janedoe@domain.com
                name:
                  type: string
                  example: Jane Doe
                message:
                  type: string
      responses:
        201:
          description: Contact form submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Details sent successfully
                  status:
                    type: boolean
        400:
          description: Request body missing a required field, or contains an invalid data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: The organisation you're trying to contact does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # dashboard
  /dashboard:
    get:
      tags: [Dashboard]
      summary: Fetch dashboard data
      responses:
        200:
          description: get an authenticated user dashboard data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardResponse"
        401:
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        status:
          type: boolean
          example: false
    DashboardResponse:
      type: object
      properties:
        status:
          type: boolean
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            photo_url:
              type: string
            verified:
              type: boolean
        organisations:
          description: organisations the user belongs to
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        active_organisation:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
        notifications:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              is_read:
                type: boolean
                example: false
        invitations:
          type: array
          items:
            type: object
            properties:
              inviter:
                type: object
              organisation:
                type: object
              expirationDate:
                type: string
              status:
                type: string
                enum:
                  - pending
                  - accepted
                  - denied
                  - revoked
                description: the invitation status

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
