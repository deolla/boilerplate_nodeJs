openapi: 3.0.0
info:
  title: User and Organisation Management API
  version: 1.0.0
  description: API for managing users, organisations, settings, and profile.

servers:
  - url: https://api.example.com/v1
    description: Production server

paths:
  /users:
    get:
      summary: Get a list of users
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{userId}:
    get:
      summary: Get a user's profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a user's profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
      responses:
        "200":
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /organisations:
    post:
      summary: Create a new organisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganisation"
      responses:
        "201":
          description: Organisation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Get a list of organisations
      responses:
        "200":
          description: List of organisations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationListResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /organisations/{orgId}:
    get:
      summary: Get an organisation's details
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Organisation details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationDetails"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /organisations/{orgId}/users:
    post:
      summary: Add a user to an organisation
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserToOrganisation"
      responses:
        "201":
          description: User added to organisation successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationUserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Organisation or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /settings:
    get:
      summary: Get settings
      responses:
        "200":
          description: Settings data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSettings"
      responses:
        "200":
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /export-data:
    get:
      summary: Export user data
      responses:
        "200":
          description: User data export initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportDataResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /messaging/email:
    post:
      summary: Send email using default template and background process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailMessage"
      responses:
        200:
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailSentResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /notifications:
    post:
      summary: Send a notification
      description: Endpoint to send notifications via email or other channels.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
              required:
                - message
      responses:
        200:
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cookies/gdpr:
    get:
      summary: Get GDPR cookies information
      description: Retrieve information about GDPR compliance and cookies usage.
      responses:
        200:
          description: GDPR cookies information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GDPRCookiesResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /waitlist:
    post:
      summary: Join the waitlist
      description: Register a user to a waitlist for a service or feature.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                service:
                  type: string
              required:
                - email
                - service
      responses:
        200:
          description: User added to the waitlist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitlistResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /superadmin/email-templates:
    get:
      summary: Get email templates
      description: Retrieve email templates managed by the Superadmin.
      responses:
        200:
          description: Email templates retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplatesResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        data:
          type: object

    CreateOrganisation:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    AddUserToOrganisation:
      type: object
      properties:
        userId:
          type: string
      required:
        - userId

    UpdateUserProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        photoUrl:
          type: string
          format: binary

    UpdateSettings:
      type: object
      properties:
        setting1:
          type: string
        setting2:
          type: string

    UserResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                photoUrl:
                  type: string
                  format: binary

    OrganisationDetails:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                orgId:
                  type: string
                name:
                  type: string
                description:
                  type: string

    OrganisationResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                orgId:
                  type: string
                name:
                  type: string
                description:
                  type: string

    Organisation:
      type: object
      properties:
        orgId:
          type: string
        name:
          type: string
        description:
          type: string

    OrganisationListResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/Organisation"

    OrganisationUserResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                orgId:
                  type: string
                userId:
                  type: string

    User:
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string

    UserListResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"

    SettingsResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                setting1:
                  type: string
                setting2:
                  type: string

    ExportDataResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"

    EmailMessage:
      type: object
      properties:
        to:
          type: string
        subject:
          type: string
        body:
          type: string

    EmailSentResponse:
      type: object
      properties:
        status:
          type: string
        messageId:
          type: string

    WaitlistRequest:
      type: object
      properties:
        email:
          type: string
        name:
          type: string

    WaitlistResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string

    EmailTemplatesListResponse:
      type: array
      items:
        type: object
        properties:
          templateId:
            type: string
          name:
            type: string
          description:
            type: string

    NotificationResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              message:
                type: string
              timestamp:
                type: string

    GDPRCookiesResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string

    EmailTemplatesResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            type: object
            properties:
              templateId:
                type: string
              name:
                type: string
              description:
                type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
        data:
          type: object
          nullable: true
